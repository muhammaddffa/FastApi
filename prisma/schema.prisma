generator client {
  provider                    = "prisma-client-py"
  recursive_type_depth        = "-1"
  enable_experimental_decimal = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model allowances {
  allowance_id   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  allowance_name String    @db.VarChar(100)
  amount         Decimal   @db.Decimal(15, 2)
  is_active      Boolean?  @default(true)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
}

model attendance {
  attendance_id   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employee_id     String    @db.Uuid
  attendance_date DateTime  @db.Date
  status          String?   @default("present") @db.VarChar(20)
  work_hours      Decimal?  @default(8.0) @db.Decimal(4, 2)
  notes           String?
  imported_at     DateTime? @default(now()) @db.Timestamp(6)
  employees       employees @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employee_id, attendance_date])
}

model deductions {
  deduction_id   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  deduction_name String    @db.VarChar(100)
  amount         Decimal   @db.Decimal(15, 2)
  is_active      Boolean?  @default(true)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
}

model employees {
  employee_id   String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employee_code String       @unique @db.VarChar(20)
  full_name     String       @db.VarChar(100)
  position      String       @db.VarChar(100)
  department    String?      @db.VarChar(50)
  hire_date     DateTime     @db.Date
  basic_salary  Decimal      @db.Decimal(15, 2)
  email         String?      @db.VarChar(100)
  phone         String?      @db.VarChar(20)
  bank_account  String?      @db.VarChar(30)
  bank_name     String?      @db.VarChar(50)
  is_active     Boolean?     @default(true)
  status        EmployeeStatus @default(ACTIVE)
  created_at    DateTime?    @default(now()) @db.Timestamp(6)
  updated_at    DateTime?    @default(now()) @db.Timestamp(6)
  photo_url     String?      @db.VarChar(255)
  attendance    attendance[]
  payslips      payslips[]
}

model export_logs {
  export_id       String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  export_type     String           @db.VarChar(20)
  file_name       String           @db.VarChar(255)
  file_path       String           @db.VarChar(500)
  file_size       BigInt?
  exported_by     String?          @db.Uuid
  export_date     DateTime?        @db.Date
  period_id       String?          @db.Uuid
  employee_count  Int?             @default(0)
  status          String?          @default("success") @db.VarChar(20)
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  users           users?           @relation(fields: [exported_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  payroll_periods payroll_periods? @relation(fields: [period_id], references: [period_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([exported_by], map: "idx_export_logs_exported_by")
}

model payroll_periods {
  period_id   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  period_code String        @unique @db.VarChar(20)
  period_name String        @db.VarChar(50)
  start_date  DateTime      @db.Date
  end_date    DateTime      @db.Date
  pay_date    DateTime      @db.Date
  status      String?       @default("draft") @db.VarChar(20)
  created_by  String?       @db.Uuid
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  export_logs export_logs[]
  users       users?        @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  payslips    payslips[]

  @@index([start_date, end_date], map: "idx_payroll_periods_dates")
  @@index([period_code], map: "idx_periods_code")
}

model payslips {
  payslip_id       String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  payslip_number   String          @unique @db.VarChar(50)
  employee_id      String          @db.Uuid
  period_id        String          @db.Uuid
  basic_salary     Decimal         @db.Decimal(15, 2)
  total_allowances Decimal?        @default(0) @db.Decimal(15, 2)
  total_deductions Decimal?        @default(0) @db.Decimal(15, 2)
  gross_salary     Decimal         @db.Decimal(15, 2)
  net_salary       Decimal         @db.Decimal(15, 2)
  work_days        Int?            @default(22)
  present_days     Int?            @default(0)
  pdf_file_path    String?         @db.VarChar(255)
  status           String?         @default("draft") @db.VarChar(20)
  approved_by      String?         @db.Uuid
  approved_at      DateTime?       @db.Timestamp(6)
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  users            users?          @relation(fields: [approved_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  employees        employees       @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade, onUpdate: NoAction)
  payroll_periods  payroll_periods @relation(fields: [period_id], references: [period_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employee_id, period_id])
}

model users {
  user_id         String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username        String            @unique @db.VarChar(50)
  email           String            @unique @db.VarChar(100)
  password        String            @db.VarChar(255)
  role            String            @db.VarChar(20)
  employee_id     String?           @db.Uuid
  is_active       Boolean?          @default(true)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  export_logs     export_logs[]
  payroll_periods payroll_periods[]
  payslips        payslips[]
}


enum EmployeeStatus {
  ACTIVE       
  INACTIVE     
  PROBATION    
  ON_LEAVE     
  SUSPENDED   
}